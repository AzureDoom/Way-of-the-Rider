plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

base {
    archivesName = project.modName
}
version = project.modVersion
group = project.mavenGroup

repositories {
    maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://libs.azuredoom.com:4443/mods" }
    maven { url "https://dl.cloudsmith.io/public/tslat/sbl/maven/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/" }
    maven { url "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url "https://maven.kosmx.dev/" }
    maven { url "https://jitpack.io" }
    maven { url "https://maven.parchmentmc.org" }
    maven { url "https://api.modrinth.com/maven" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricVersion}"
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-fabric-${project.minecraftVersion}:${project.sblVersion}"
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-common-${project.minecraftVersion}:${project.sblVersion}"
    modImplementation "mod.azure.azurelib:azurelib-fabric-${project.minecraftVersion}:${project.azurelibVersion}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenuVersion}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

if (file('key.properties').exists()) {
    curseforge {

        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())

        project {
            apiKey = curseProp.getProperty('curseKey')
            id = "635673"
            releaseType = "release"
            changelogType = 'text'
            changelog = file('CHANGELOG.txt')
            addGameVersion("1.20.1")
            addGameVersion("Fabric")
            addGameVersion("Java 17")

            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'azurelib'
                requiredDependency 'smartbrainlib'
            }
            mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn("remapJar")
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }
}

if (file('key.properties').exists()) {
    modrinth {
        def modrinthProp = new Properties()
        File secretPropsFile = file("key.properties")
        modrinthProp.load(secretPropsFile.newInputStream())

        token = modrinthProp.getProperty('modrinthKey')
        projectId = 'QWM70Su7'
        versionNumber = project.modVersion
        uploadFile = remapJar
        changelog = rootProject.file("CHANGELOG.txt").text
        gameVersions = ['1.20.1']
        loaders = ['fabric', 'quilt']
        dependencies {
            required.project "azurelib"
            required.project "smartbrainlib"
            required.project "fabric-api"
        }
    }
}
